#!/bin/bash

set -e
set -o pipefail

################################################################################
# Author:
#   Ash Davies <@DrizzlyOwl>
# Version:
#   1.1.0
# Description:
#   Search an Azure AD for App Registrations that have Client Credentials with
#   expiry dates. If an expiry date is due within the next X days report it
# Usage:
#   ./entra-app-scan [-d <days>]
################################################################################

usage () {
  echo "Usage: $0 [-d <days>]"
  echo "Options:"
  echo "  -d <days>   Set the number of days for expiry check (default: 90)"
  exit 1
}

if ! command -v print >/dev/null;
then
  print () {
    echo "$1: $2"
  }
fi

if [ -z "$APP_ROOT" ];
then
  APP_ROOT="$( cd "$(dirname "${BASH_SOURCE[0]}")"/../ && pwd -P)"
fi

# --- START Configuration ---
LOOK_AHEAD_DAYS=90
NOTIFY_SCRIPT_PATH="$APP_ROOT/bin/notify"
# --- END Configuration ---

while getopts "d:" opt; do
  case "$opt" in
    d)
      LOOK_AHEAD_DAYS="$OPTARG"
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1)) # Shift processed options

if ! [[ "$LOOK_AHEAD_DAYS" =~ ^[0-9]+$ ]];
then
  print "ERROR" "Expiry threshold (-d) must be a positive number. Value provided: '$LOOK_AHEAD_DAYS'"
  exit 1
fi

# Define a temporary file to store client IDs
TEMP_CLIENT_IDS_FILE=$(mktemp)
trap 'rm -f "$TEMP_CLIENT_IDS_FILE"' EXIT # Ensure the temporary file is deleted on exit

# Read Client IDs from an environment variable.
# The environment variable should contain a space-separated list of Client IDs.
# Example: export APP_REGISTRATIONS="id1 id2 id3"
# If the environment variable is not set, the script will try to source owned apps.
if [ -z "$APP_REGISTRATIONS" ];
then
  print "DEBUG" "No App Registrations specified. Defaulting to all owned App Registrations."

  # Get the user's own applications, and extract the appId (Client ID)
  # Redirect output to the temporary file, one ID per line
  if ! az ad app list \
    --show-mine \
    --query "[].appId" \
    -o tsv > "$TEMP_CLIENT_IDS_FILE";
  then
    MSG="Failed to fetch your Azure AD applications using 'az ad app list --show-mine'. Please ensure you are logged in to Azure CLI and have the necessary permissions."
    print "ERROR" "$MSG"

    if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ];
    then
      bash "$NOTIFY_SCRIPT_PATH" \
        -t "ðŸŽ¯ *Entra Client Credentials Expiry Scan task failed to start*" \
        -l "*Error:* Startup error" \
        -d "*Fatal:* $MSG" \
        -c "#FF0000"
    fi

    exit 1
  fi
else
  print "DEBUG" "Using applications from environment variable 'APP_REGISTRATIONS'."

  echo "$APP_REGISTRATIONS" | tr ' ' '\n' > "$TEMP_CLIENT_IDS_FILE"
fi

if [ ! -s "$TEMP_CLIENT_IDS_FILE" ];
then
  MSG="No Client IDs are available for processing. Unable to continue."
  print "ERROR" "$MSG"

  if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ];
  then
    bash "$NOTIFY_SCRIPT_PATH" \
      -t "ðŸŽ¯ *Entra Client Credentials Expiry Scan task failed to start*" \
      -l "*Error:* Startup error" \
      -d "*Fatal:* $MSG" \
      -c "#FF0000"
  fi

  exit 1
fi

# Date calculations for comparison (YYYYMMDD integer format)
TODAY_DATE_ISO=$(get_future_date "0") # Expects YYYY-MM-DDTHH:MM:SS...
TODAY_DATE_YMD=${TODAY_DATE_ISO:0:10} # Extracts YYYY-MM-DD
TODAY_DATE_INT=${TODAY_DATE_YMD//-/}  # Converts to YYYYMMDD

FUTURE_DATE_ISO=$(get_future_date "$LOOK_AHEAD_DAYS")
FUTURE_DATE_YMD=${FUTURE_DATE_ISO:0:10}
FUTURE_DATE_INT=${FUTURE_DATE_YMD//-/}

print "DEBUG" "Client Credentials with an expiry date on or before $FUTURE_DATE_YMD will be reported."

ALL_PROBLEM_CREDENTIAL_FIELDS="[]" # JSON array string for all problematic credential fields
EXPIRING_SECRETS_FOUND_GLOBAL=false # Global flag if any problematic secret is found

# Your existing global counters are good:
SECRET_EXPIRING_SOON_COUNT_GLOBAL=0
SECRET_EXPIRED_COUNT_GLOBAL=0

# Initialize an empty array to store results
declare -a RESULTS_ARRAY=()

# Reset file pointer to the beginning for the main processing loop
exec 3< "$TEMP_CLIENT_IDS_FILE" # Open file descriptor 3 for reading

while IFS= read -r CLIENT_ID <&3;
do
  # Skip empty lines that might result from tr or malformed input
  if [ -z "$CLIENT_ID" ];
  then
      continue
  fi

  print "INFO" "Retrieving details for Client ID: '$CLIENT_ID'."

  if APP_DETAILS=$(az ad app list \
    --filter "appId eq '$CLIENT_ID'" \
    --query "[0].{appId:appId, displayName:displayName, objectId:objectId, passwordCredentials:passwordCredentials}" \
    -o json 2>/dev/null) && [ -n "$APP_DETAILS" ] && [ "$APP_DETAILS" != "null" ];
  then
    APP_NAME=$(echo "$APP_DETAILS" | jq -r '.displayName')
    APP_SECRETS=$(echo "$APP_DETAILS" | jq -r '.passwordCredentials')

    # Construct the text for this specific credential, including App context
    SLACK_SECRET_AZURE_LINK="<https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Credentials/appId/$CLIENT_ID|$APP_NAME>"

    print "DEBUG" "Display Name: $APP_NAME"
    print "DEBUG" "Object ID: $CLIENT_ID"

    RESULTS_ARRAY+=("$APP_DETAILS")

    while IFS= read -r secret_item_json;
    do
      SECRET_NAME=$(echo "$secret_item_json" | jq -r '.displayName')
      SECRET_EXPIRY_DATE_STRING=$(echo "$secret_item_json" | jq -r '.endDateTime')
      SECRET_EXPIRY_DATE_YMD=${SECRET_EXPIRY_DATE_STRING:0:10}
      SECRET_EXPIRY_DATE_INT=${SECRET_EXPIRY_DATE_YMD//-/} # Integer for comparison

      # Set local defaults for the current secret item
      SECRET_STATE_EMOJI=":white_check_mark:"
      LOCAL_SECRET_STATUS="Valid"

      if [[ "$SECRET_EXPIRY_DATE_INT" -le "$TODAY_DATE_INT" ]];
      then
        SECRET_STATE_EMOJI=":octagonal_sign:"
        SECRET_EXPIRED_COUNT_GLOBAL=$((SECRET_EXPIRED_COUNT_GLOBAL+1))
        LOCAL_SECRET_STATUS="Expired"

        print "WARNING" "'$SECRET_NAME' expired on $SECRET_EXPIRY_DATE_STRING"
      elif [[ "$SECRET_EXPIRY_DATE_INT" -le "$FUTURE_DATE_INT" ]];
      then
        SECRET_STATE_EMOJI=":warning:"
        SECRET_EXPIRING_SOON_COUNT_GLOBAL=$((SECRET_EXPIRING_SOON_COUNT_GLOBAL+1))
        LOCAL_SECRET_STATUS="Expiring soon"

        print "WARNING" "'$SECRET_NAME' expiring in the next $LOOK_AHEAD_DAYS days"
      else
        print "INFO" "'$SECRET_NAME' valid until $SECRET_EXPIRY_DATE_STRING"
      fi

      # This is where we collect data for the consolidated Slack message
      if [ "$LOCAL_SECRET_STATUS" != "Valid" ];
      then
        EXPIRING_SECRETS_FOUND_GLOBAL=true # Set the global flag
        FIELD_TEXT_FOR_SLACK="$SECRET_STATE_EMOJI \`$SECRET_NAME\` in $SLACK_SECRET_AZURE_LINK ($SECRET_EXPIRY_DATE_YMD)"

        NEW_FIELD_JSON_OBJECT=$(jq -n --arg text_content "$FIELD_TEXT_FOR_SLACK" '{
          "type": "mrkdwn",
          "text": $text_content
        }')

        # Append the new field object to the global list of fields
        ALL_PROBLEM_CREDENTIAL_FIELDS=$(jq -n \
          --argjson existing_fields "$ALL_PROBLEM_CREDENTIAL_FIELDS" \
          --argjson new_field "$NEW_FIELD_JSON_OBJECT" \
          '$existing_fields + [$new_field]')
      fi
    done < <(echo "$APP_SECRETS" | jq -c '.[]')
  else
    print "WARNING" "Could not find details for Client ID: '$CLIENT_ID'. It might not exist or you lack permissions."
  fi
done

exec 3<&-

# Send Slack notification
if [ "$EXPIRING_SECRETS_FOUND_GLOBAL" = false ];
then
  print "INFO" "No client secrets found expiring within the next $LOOK_AHEAD_DAYS days."
fi

exec 3<&-

APP_REGISTRATIONS_PROCESSED_COUNT=${#RESULTS_ARRAY[@]}

NOTIFY_SLACK_HEADING="ðŸŽ¯ *Entra Client Credentials Expiry Scan task started*"
NOTIFY_SLACK_LABEL="Finished scanning $APP_REGISTRATIONS_PROCESSED_COUNT App Registrations."
NOTIFY_SLACK_DESCRIPTION="$SECRET_EXPIRING_SOON_COUNT_GLOBAL client credentials are expiring soon (next $LOOK_AHEAD_DAYS days). $SECRET_EXPIRED_COUNT_GLOBAL have expired."
NOIFY_SLACK_COLOR="#007fff"

if [ "$SECRET_EXPIRED_COUNT_GLOBAL" -gt 0 ]; then
  NOIFY_SLACK_COLOR="#FF0000"
elif [ "$SECRET_EXPIRING_SOON_COUNT_GLOBAL" -gt 0 ]; then
  NOIFY_SLACK_COLOR="#FFA500"
else
  NOIFY_SLACK_COLOR="#36A64F"
  NOTIFY_SLACK_DESCRIPTION="No client credentials found expiring or expired within the next $LOOK_AHEAD_DAYS days."
fi

if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ] && [ -x "$NOTIFY_SCRIPT_PATH" ]; then
  if [ "$EXPIRING_SECRETS_FOUND_GLOBAL" = true ]; then
    bash "$NOTIFY_SCRIPT_PATH" \
      -t "$NOTIFY_SLACK_HEADING" \
      -l "*Result:* $NOTIFY_SLACK_LABEL" \
      -d "*Message:* $NOTIFY_SLACK_DESCRIPTION" \
      -c "$NOIFY_SLACK_COLOR" \
      -b "$ALL_PROBLEM_CREDENTIAL_FIELDS"
  else
    bash "$NOTIFY_SCRIPT_PATH" \
      -t "$NOTIFY_SLACK_HEADING" \
      -l "*Result:* $NOTIFY_SLACK_LABEL" \
      -d "*Message:* $NOTIFY_SLACK_DESCRIPTION" \
      -c "$NOIFY_SLACK_COLOR"
  fi
fi

print "INFO" "$NOTIFY_SLACK_LABEL $NOTIFY_SLACK_DESCRIPTION"
