#!/bin/bash

# /**
#  * @brief Outputs a log message with a timestamp and specified level.
#  *
#  * This function takes a log level, and a message
#  * It formats the output with a log level indicator, and the script name.
#  * Error messages are directed to standard error.
#  *
#  * @param level (string) The log level of the message.
#  * Valid values are: "INFO", "WARNING", "ERROR", "DEBUG".
#  * If no level is provided, it defaults to "INFO".
#  * @param message (string) The log message to be displayed.
#  *
#  * @usage print "DEBUG" "Something uninteresting happened."
#  * @usage print "INFO" "Script started successfully."
#  * @usage print "WARNING" "Approaching a critical threshold."
#  * @usage print "ERROR" "Failed to connect to the server."
#  */
function print {
  local msg_level="$1"
  local log_message="$2"
  local script_base_name
  local upper_global_log_level
  local upper_msg_level
  script_base_name=$(basename "$0")

  # Convert both global LOG_LEVEL and message level to uppercase for comparison
  upper_global_log_level=$(echo "$LOG_LEVEL" | tr '[:lower:]' '[:upper:]')
  upper_msg_level=$(echo "$msg_level" | tr '[:lower:]' '[:upper:]')

  # Determine if the message should be printed based on the global LOG_LEVEL
  local should_print=0 # Default to not print
  case "$upper_global_log_level" in
    "DEBUG")
        should_print=1 # Print all levels
      ;;
    "INFO")
      if [[ "$upper_msg_level" == "DEBUG" ]]; then
        should_print=0 # Do not print DEBUG if LOG_LEVEL is INFO
      else
        should_print=1 # Print INFO, WARNING, ERROR
      fi
    ;;
    "ERROR")
      if [[ "$upper_msg_level" == "ERROR" ]];
      then
        should_print=1
      fi
      ;;
    "WARNING")
      if [[ "$upper_msg_level" == "ERROR" || "$upper_msg_level" == "WARNING" ]];
      then
        should_print=1
      fi
      ;;
    *) # Default to INFO if LOG_LEVEL is not set or invalid
      if [[ "$upper_msg_level" == "DEBUG" ]]; then
        should_print=0 # Do not print DEBUG by default
      else
        should_print=1 # Print INFO, WARNING, ERROR by default
      fi
      ;;
  esac

  if [ "$should_print" -eq 1 ];
  then
    case "$upper_msg_level" in
      "DEBUG")
        echo "[DEBUG] [$script_base_name] $log_message"
        ;;
      "ERROR")
        echo "[ERROR] [$script_base_name] $log_message" >&2
        ;;
      "WARNING")
        echo "[WARNING] [$script_base_name] $log_message"
        ;;
      *) # Default to INFO if message level is not valid
        echo "[INFO] [$script_base_name] $log_message"
        ;;
    esac
  fi
}
