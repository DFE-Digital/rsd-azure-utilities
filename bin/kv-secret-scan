#! /bin/bash

set -e
set -o pipefail

################################################################################
# Author:
#   Ash Davies <@DrizzlyOwl>
# Version:
#   1.1.0
# Description:
#   Search an Azure Subscription for Azure Key Vaults that have Secrets with
#   expiry dates. If an expiry date is due within the next X days report it
# Usage:
#   ./kv-secret-scan -d <domain> [-s <subscription name>]
################################################################################

usage () {
  echo "Usage: $0 -d <domain> [-s <subscription name>]"
  echo "  -d <domain>              Domain of the Azure tenant e.g. platform.education.gov.uk"
  echo "  -s <subscription name>   Azure Subscription ID or Name (optional)"
  exit 1
}

if ! command -v print >/dev/null;
then
  print () {
    echo "$1: $2"
  }
fi

if [ -z "$APP_ROOT" ];
then
  APP_ROOT="$( cd "$(dirname "${BASH_SOURCE[0]}")"/../ && pwd -P)"
fi

# --- START Configuration ---
LOOK_AHEAD_DAYS=90
NOTIFY_SCRIPT_PATH="$APP_ROOT/bin/notify"
PLATFORM_DOMAIN="${PLATFORM_DOMAIN:-"platform.education.gov.uk"}"
# --- END Configuration ---

while getopts "d:s:" opt;
do
  case $opt in
    d)
      PLATFORM_DOMAIN=$OPTARG
      ;;
    s)
      AZ_SUBSCRIPTION_SCOPE=$OPTARG
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1)) # Shift processed options

# Entered a dead-end without user input
if [ -z "$AZ_SUBSCRIPTION_SCOPE" ];
then
  MSG="You must specify the Subscription ID or Name. Unable to continue."
  print "ERROR" "$MSG"

  if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ];
  then
    bash "$NOTIFY_SCRIPT_PATH" \
      -t "ðŸŽ¯ *Key Vault Secret Expiry Scan task failed to start*" \
      -l "*Error:* Missing required option" \
      -d "*Message:* $MSG" \
      -c "#FF0000"
  fi

  exit 1
fi

if [ -z "$PLATFORM_DOMAIN" ];
then
  MSG="You must specify the Azure tenancy domain (e.g. platform.education.gov.uk). Unable to continue."
  print "ERROR" "$MSG"

  if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ];
  then
    bash "$NOTIFY_SCRIPT_PATH" \
      -t "ðŸŽ¯ *Key Vault Secret Expiry Scan task failed to start*" \
      -l "*Error:* Missing required option" \
      -d "*Message:* $MSG" \
      -c "#FF0000"
  fi

  exit 1
fi

# --- START Slack specific variables ---
EXPIRING_SECRETS_SLACK_FIELDS="[]" # JSON array string for notify -b option
NOTIFY_SLACK_HEADING="ðŸŽ¯ *Key Vault Secret Expiry Scan task started in \`$AZ_SUBSCRIPTION_SCOPE\`*"
# --- END Slack specific variables ---

# --- START functions
set_look_ahead_date () {
  local current_timestamp
  local seconds_in_x_days
  local look_ahead_timestamp

  if command -v gdate >/dev/null 2>&1;
  then
    TODAY=$(gdate +"%Y-%m-%d")
    FUTURE=$(gdate --date="$LOOK_AHEAD_DAYS days" +"%Y-%m-%d")
  else
    OS_TYPE=$(uname -s)
    TODAY=$(date +"%Y-%m-%d")

    if [ "$OS_TYPE" == "Darwin" ];
    then
      # macOS (BSD date) behavior for converting timestamp back to date
      current_timestamp=$(date "+%s")
      seconds_in_x_days=$((LOOK_AHEAD_DAYS * 24 * 60 * 60))
      look_ahead_timestamp=$((current_timestamp + seconds_in_x_days))
      FUTURE=$(date -r "$look_ahead_timestamp" +"%Y-%m-%d")
    elif [ "$OS_TYPE" == "Linux" ];
    then
      # Linux (GNU date) behavior for converting timestamp back to date
      FUTURE=$(date --date="$LOOK_AHEAD_DAYS days" +"%Y-%m-%d")
    fi
  fi

  print "DEBUG" "Setting look ahead days to $LOOK_AHEAD_DAYS."
  print "DEBUG" "In $LOOK_AHEAD_DAYS days, the date will be $FUTURE."
  print "DEBUG" "Today the date is $TODAY."

  export FUTURE
  export TODAY
}

set_look_ahead_date;
# --- END functions

# Find all Azure Key Vaults within the specified subscription
print "DEBUG" "Fetching Key Vaults from subscription '$AZ_SUBSCRIPTION_SCOPE'..."
if ! KV_LIST_JSON=$(
  az keyvault list \
    --subscription "$AZ_SUBSCRIPTION_SCOPE" \
    --only-show-errors \
    --output json \
);
then
  MSG="Failed to list Key Vaults in subscription '$AZ_SUBSCRIPTION_SCOPE'. Please check your Azure credentials and subscription."
  print "ERROR" "$MSG"

  if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ];
  then
    bash "$NOTIFY_SCRIPT_PATH" \
      -t "ðŸŽ¯ *Key Vault Secret Expiry Scan task failed*" \
      -l "*Error:* Lookup failure" \
      -d "*Message:* $MSG" \
      -c "#FF0000"
  fi

  exit 1
fi

# --- START Counters ---
COUNT_KEY_VAULT="$(echo "$KV_LIST_JSON" | jq -c 'length')"
TOTAL_SECRET_COUNT=0
TOTAL_EXPIRING_COUNT=0
TOTAL_EXPIRED_COUNT=0
# --- END Counters ---

while IFS= read -r KEY_VAULT_INFO_JSON;
do
  KV_NAME=$(echo "$KEY_VAULT_INFO_JSON" | jq -rc '.name')
  KV_RESOURCE_GROUP=$(echo "$KEY_VAULT_INFO_JSON" | jq -rc '.resourceGroup')

  print "INFO" "Scanning Azure Key Vault: '$KV_NAME' in Resource Group: '$KV_RESOURCE_GROUP'."

  SECRETS_JSON=""
  if ! SECRETS_JSON=$(
    az keyvault secret list \
      --vault-name "$KV_NAME" \
      --output json \
      --only-show-errors \
      --subscription "$AZ_SUBSCRIPTION_SCOPE" \
  );
  then
    print "WARNING" "Failed to list secrets for Key Vault '$KV_NAME'. Continuing with the next Key Vault."
    continue # Skip to next key vault
  fi

  if [ -z "$SECRETS_JSON" ] || [ "$(echo "$SECRETS_JSON" | jq 'length')" -eq 0 ];
  then
    print "INFO" "No secrets found in Key Vault '$KV_NAME'."
    continue
  fi

  FILTERED_SECRETS_INFO=$(echo "$SECRETS_JSON" | jq -c '.[] | select(.attributes.enabled == true and .attributes.expires != null) | { "secret_name": .name, "expiry_date": .attributes.expires }')

  if [ -z "$FILTERED_SECRETS_INFO" ];
  then
    print "INFO" "No secrets with expiry dates found in Key Vault '$KV_NAME'."
    continue
  fi

  while IFS= read -r SECRET_INFO_JSON;
  do
    SECRET_NAME=$(echo "$SECRET_INFO_JSON" | jq -rc '.secret_name')
    SECRET_EXPIRY=$(echo "$SECRET_INFO_JSON" | jq -rc '.expiry_date') # Format: YYYY-MM-DDTHH:MM:SSZ

    TOTAL_SECRET_COUNT=$((TOTAL_SECRET_COUNT+1))
    SECRET_STATUS="Valid" # Default status

    # Check expiry of existing token
    SECRET_EXPIRY_TIMESTAMP=$(get_timestamp "$SECRET_EXPIRY") # Date the secret expires
    FUTURE_TIMESTAMP=$(get_timestamp "$FUTURE 23:59:59")      # End of the day for our look ahead date
    TODAY_TIMESTAMP=$(get_timestamp "$TODAY 00:00:00")        # Start of today

    if [[ "$SECRET_EXPIRY_TIMESTAMP" -lt "$TODAY_TIMESTAMP" ]];
    then
      SECRET_STATUS="Expired"
      TOTAL_EXPIRED_COUNT=$((TOTAL_EXPIRED_COUNT+1))
    elif [[ "$SECRET_EXPIRY_TIMESTAMP" -lt "$FUTURE_TIMESTAMP" ]];
    then
      SECRET_STATUS="Expiring soon"
      TOTAL_EXPIRING_COUNT=$((TOTAL_EXPIRING_COUNT+1))
    else
      SECRET_STATUS="Valid"
    fi

    print "INFO" "Secret: '$SECRET_NAME' | Expiry Date: '$SECRET_EXPIRY' | State: '$SECRET_STATUS'"

    if [ "$SECRET_STATUS" != "Valid" ];
    then
      # Create a Markdown hyperlink for use in Slack messaging
      SLACK_SECRET_AZURE_LINK="<https://portal.azure.com/?feature.msaljs=true#@$PLATFORM_DOMAIN/asset/Microsoft_Azure_KeyVault/Secret/https://$KV_NAME.vault.azure.net/secrets/$SECRET_NAME|$SECRET_NAME>"

      # Build out a new Slack JSON field and append it to the collection
      SLACK_FIELD_TEXT="*Key Vault:* \`$KV_NAME\`\n*Secret:* $SLACK_SECRET_AZURE_LINK\n*Status:* $SECRET_STATUS\n*Expiry Date:* $SECRET_EXPIRY"
      NEW_SLACK_FIELD_JSON=$(jq -n --arg text "$SLACK_FIELD_TEXT" '{type: "mrkdwn", text: $text}')
      EXPIRING_SECRETS_SLACK_FIELDS=$(echo "$EXPIRING_SECRETS_SLACK_FIELDS" | jq --argjson new_field "$NEW_SLACK_FIELD_JSON" '. += [$new_field]')
    fi
  done < <(echo "$FILTERED_SECRETS_INFO")

done < <(echo "$KV_LIST_JSON" | jq -rc '.[] | { "name": .name, "resourceGroup": .resourceGroup }')

# --- Final Summary and Consolidated Notification ---
MSG="Finished scanning $COUNT_KEY_VAULT Key Vaults and $TOTAL_SECRET_COUNT secrets with expiry dates. $TOTAL_EXPIRED_COUNT were expired. $TOTAL_EXPIRING_COUNT were expiring soon in the next $LOOK_AHEAD_DAYS days."
print "INFO" "$MSG"

if [ "$NOTIFY" == 1 ] && [ -f "$NOTIFY_SCRIPT_PATH" ];
then
  if [ "$TOTAL_EXPIRED_COUNT" -gt 0 ] || [ "$TOTAL_EXPIRING_COUNT" -gt 0 ];
  then
    # Secrets found that match criteria
    NOTIFY_SLACK_LABEL="$TOTAL_EXPIRED_COUNT expired, $TOTAL_EXPIRING_COUNT expiring soon"
    NOTIFY_SLACK_COLOR="#FF9900" # Warning color (Orange)

    bash "$NOTIFY_SCRIPT_PATH" \
      -t "$NOTIFY_SLACK_HEADING" \
      -l "*Result:* $NOTIFY_SLACK_LABEL" \
      -d "*Message:* $MSG" \
      -c "$NOTIFY_SLACK_COLOR" \
      -b "$EXPIRING_SECRETS_SLACK_FIELDS"
  else
    # No secrets matching criteria found
    NOTIFY_SLACK_LABEL="No secrets found requiring action."
    NOTIFY_SLACK_COLOR="#36A64F" # Success color (Green)

    bash "$NOTIFY_SCRIPT_PATH" \
      -t "$NOTIFY_SLACK_HEADING" \
      -l "*Result:* $NOTIFY_SLACK_LABEL" \
      -d "*Message:* $MSG" \
      -c "$NOTIFY_SLACK_COLOR"
  fi
fi

print "INFO" "Key Vault Secret Expiry Scan task finished."
